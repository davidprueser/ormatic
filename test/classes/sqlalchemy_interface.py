# Generated by ORMatic

from __future__ import annotations
from sqlalchemy import Column, ForeignKey, Integer, String, Float, Boolean, DateTime, Enum, JSON
from sqlalchemy.orm import relationship, Mapped, mapped_column, declarative_base
from typing_extensions import Optional, List

import classes.example_classes
from classes.example_classes import Element

from ormatic.dao import DataAccessObject
from ormatic.custom_types import TypeType

Base = declarative_base()

class AtomDAO(Base, DataAccessObject[classes.example_classes.Atom]):
    __tablename__ = 'AtomDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    element: Mapped[Element]
    type: Mapped[int]
    charge: Mapped[float]




    __mapper_args__ = {}


class ParentDAO(Base, DataAccessObject[classes.example_classes.Parent]):
    __tablename__ = 'ParentDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str]
    polymorphic_type: Mapped[str]




    __mapper_args__ = {'polymorphic_on': 'polymorphic_type', 'polymorphic_identity': 'ParentDAO'}


class DoublePositionAggregatorDAO(Base, DataAccessObject[classes.example_classes.DoublePositionAggregator]):
    __tablename__ = 'DoublePositionAggregatorDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)



    positions1: Mapped[List[PositionDAO]] = relationship('PositionDAO', foreign_keys='[PositionDAO.doublepositionaggregatordao_positions1_id]')
    positions2: Mapped[List[PositionDAO]] = relationship('PositionDAO', foreign_keys='[PositionDAO.doublepositionaggregatordao_positions2_id]')

    __mapper_args__ = {}


class NodeDAO(Base, DataAccessObject[classes.example_classes.Node]):
    __tablename__ = 'NodeDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)


    parent_id: Mapped[int] = mapped_column(ForeignKey('NodeDAO.id'))

    parent: Mapped[NodeDAO] = relationship('NodeDAO', uselist=False, foreign_keys=[parent_id])

    __mapper_args__ = {}


class OrientationDAO(Base, DataAccessObject[classes.example_classes.Orientation]):
    __tablename__ = 'OrientationDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    x: Mapped[float]
    y: Mapped[float]
    z: Mapped[float]
    w: Mapped[Optional[float]]




    __mapper_args__ = {}


class PoseDAO(Base, DataAccessObject[classes.example_classes.Pose]):
    __tablename__ = 'PoseDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)


    position_id: Mapped[int] = mapped_column(ForeignKey('PositionDAO.id'))
    orientation_id: Mapped[int] = mapped_column(ForeignKey('OrientationDAO.id'))

    position: Mapped[PositionDAO] = relationship('PositionDAO', uselist=False, foreign_keys=[position_id])
    orientation: Mapped[OrientationDAO] = relationship('OrientationDAO', uselist=False, foreign_keys=[orientation_id])

    __mapper_args__ = {}


class PositionDAO(Base, DataAccessObject[classes.example_classes.Position]):
    __tablename__ = 'PositionDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    x: Mapped[float]
    y: Mapped[float]
    z: Mapped[float]
    polymorphic_type: Mapped[str]


    doublepositionaggregatordao_positions1_id: Mapped[Optional[int]] = mapped_column(ForeignKey('DoublePositionAggregatorDAO.id'))
    doublepositionaggregatordao_positions2_id: Mapped[Optional[int]] = mapped_column(ForeignKey('DoublePositionAggregatorDAO.id'))
    positionsdao_positions_id: Mapped[Optional[int]] = mapped_column(ForeignKey('PositionsDAO.id'))


    __mapper_args__ = {'polymorphic_on': 'polymorphic_type', 'polymorphic_identity': 'PositionDAO'}


class PositionTypeWrapperDAO(Base, DataAccessObject[classes.example_classes.PositionTypeWrapper]):
    __tablename__ = 'PositionTypeWrapperDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    position_type: Mapped[str] = mapped_column(TypeType, nullable=False)



    __mapper_args__ = {}


class PositionsDAO(Base, DataAccessObject[classes.example_classes.Positions]):
    __tablename__ = 'PositionsDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    some_strings: Mapped[List[str]] = mapped_column(JSON, nullable=False)


    positions: Mapped[List[PositionDAO]] = relationship('PositionDAO', foreign_keys='[PositionDAO.positionsdao_positions_id]')

    __mapper_args__ = {}


class ChildMappedDAO(ParentDAO, DataAccessObject[classes.example_classes.ChildMapped]):
    __tablename__ = 'ChildMappedDAO'

    id: Mapped[int] = mapped_column(ForeignKey(ParentDAO.id), primary_key=True)
    attribute1: Mapped[int]




    __mapper_args__ = {'polymorphic_on': 'polymorphic_type', 'polymorphic_identity': 'ChildMappedDAO'}


class Position4DDAO(PositionDAO, DataAccessObject[classes.example_classes.Position4D]):
    __tablename__ = 'Position4DDAO'

    id: Mapped[int] = mapped_column(ForeignKey(PositionDAO.id), primary_key=True)
    w: Mapped[float]




    __mapper_args__ = {'polymorphic_on': 'polymorphic_type', 'polymorphic_identity': 'Position4DDAO'}


