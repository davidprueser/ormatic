# Generated by SQLAlchemyGenerator

from sqlalchemy import Column, ForeignKey, Integer, String, Float, Boolean, DateTime, Enum, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, Mapped, mapped_column
from typing_extensions import Optional, List

import classes.example_classes
from classes.example_classes import Element

from ormatic.dao import DataAccessObject

Base = declarative_base()

class AtomDAO(Base, DataAccessObject[classes.example_classes.Atom]):
    __tablename__ = 'AtomDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    element: Mapped[Element]
    type: Mapped[int]
    charge: Mapped[float]



class PositionDAO(Base, DataAccessObject[classes.example_classes.Position]):
    __tablename__ = 'PositionDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    x: Mapped[float]
    y: Mapped[float]
    z: Mapped[float]



class OrientationDAO(Base, DataAccessObject[classes.example_classes.Orientation]):
    __tablename__ = 'OrientationDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    x: Mapped[float]
    y: Mapped[float]
    z: Mapped[float]
    w: Mapped[Optional[float]]



class PoseDAO(Base, DataAccessObject[classes.example_classes.Pose]):
    __tablename__ = 'PoseDAO'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)




class Position4DDAO(PositionDAO, DataAccessObject[classes.example_classes.Position4D]):
    __tablename__ = 'Position4DDAO'

    id: Mapped[int] = mapped_column(ForeignKey(PositionDAO.id), primary_key=True)

    w: Mapped[float]



