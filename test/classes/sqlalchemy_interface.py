# Generated by SQLAlchemyGenerator

from sqlalchemy import Column, ForeignKey, Integer, String, Float, Boolean, DateTime, Enum, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship, registry
from typing import Optional, List, Dict, Any
from classes.example_classes import Parent
from classes.example_classes import Node
from classes.example_classes import KinematicChain
from classes.example_classes import Positions
from classes.example_classes import Pose
from classes.example_classes import PositionTypeWrapper
from classes.example_classes import ObjectAnnotation
from classes.example_classes import Entity
from classes.example_classes import Position
from classes.example_classes import OriginalSimulatedObject
from classes.example_classes import Orientation
from classes.example_classes import Atom
from classes.example_classes import DoublePositionAggregator
from classes.example_classes import ChildMapped
from classes.example_classes import Torso
from classes.example_classes import DerivedEntity
from classes.example_classes import Position4D
from ormatic.dao import DataAccessObject


# SQLAlchemy declarative base
Base = declarative_base()

# SQLAlchemy registry
mapper_registry = registry()



class ParentDAO(Base, DataAccessObject[Parent]):
    __tablename__ = 'parentdao'

    id = Column(Integer, primary_key=True)
    polymorphic_type = Column(String(255))
    __mapper_args__ = {
        'polymorphic_on': polymorphic_type,
        'polymorphic_identity': 'classes.example_classes.Parent'
    }
    name = Column(String(255))


class NodeDAO(Base, DataAccessObject[Node]):
    __tablename__ = 'nodedao'

    id = Column(Integer, primary_key=True)
    parent_id = Column(Integer, ForeignKey('NodeDAO.id'), nullable=True)
    parent = relationship('NodeDAO', uselist=False)


class KinematicChainDAO(Base, DataAccessObject[KinematicChain]):
    __tablename__ = 'kinematicchaindao'

    id = Column(Integer, primary_key=True)
    polymorphic_type = Column(String(255))
    __mapper_args__ = {
        'polymorphic_on': polymorphic_type,
        'polymorphic_identity': 'classes.example_classes.KinematicChain'
    }
    name = Column(String(255))


class PositionsDAO(Base, DataAccessObject[Positions]):
    __tablename__ = 'positionsdao'

    id = Column(Integer, primary_key=True)
    some_strings = Column(String(255)  # Unknown type: JSON, nullable=True)
    positions = relationship('PositionDAO', uselist=True)


class PoseDAO(Base, DataAccessObject[Pose]):
    __tablename__ = 'posedao'

    id = Column(Integer, primary_key=True)
    position_id = Column(Integer, ForeignKey('PositionDAO.id'))
    orientation_id = Column(Integer, ForeignKey('OrientationDAO.id'))
    position = relationship('PositionDAO', uselist=False)
    orientation = relationship('OrientationDAO', uselist=False)


class PositionTypeWrapperDAO(Base, DataAccessObject[PositionTypeWrapper]):
    __tablename__ = 'positiontypewrapperdao'

    id = Column(Integer, primary_key=True)
    position_type = Column(String(255)  # Error determining type: , nullable=True)
    position_type = Column(JSON, nullable=False)


class ObjectAnnotationDAO(Base, DataAccessObject[ObjectAnnotation]):
    __tablename__ = 'objectannotationdao'

    id = Column(Integer, primary_key=True)
    object_reference_id = Column(Integer, ForeignKey('OriginalSimulatedObjectDAO.id'))
    object_reference = relationship('OriginalSimulatedObjectDAO', uselist=False)


class EntityDAO(Base, DataAccessObject[Entity]):
    __tablename__ = 'entitydao'

    id = Column(Integer, primary_key=True)
    polymorphic_type = Column(String(255))
    __mapper_args__ = {
        'polymorphic_on': polymorphic_type,
        'polymorphic_identity': 'classes.example_classes.Entity'
    }
    name = Column(String(255))


class PositionDAO(Base, DataAccessObject[Position]):
    __tablename__ = 'positiondao'

    id = Column(Integer, primary_key=True)
    polymorphic_type = Column(String(255))
    __mapper_args__ = {
        'polymorphic_on': polymorphic_type,
        'polymorphic_identity': 'classes.example_classes.Position'
    }
    positions_positions_id = Column(Integer, ForeignKey('PositionsDAO.id'), nullable=True)
    x = Column(Float)
    y = Column(Float)
    z = Column(Float)
    doublepositionaggregator_positions1_id = Column(Integer, ForeignKey('DoublePositionAggregatorDAO.id'), nullable=True)
    doublepositionaggregator_positions2_id = Column(Integer, ForeignKey('DoublePositionAggregatorDAO.id'), nullable=True)


class OriginalSimulatedObjectDAO(Base, DataAccessObject[OriginalSimulatedObject]):
    __tablename__ = 'originalsimulatedobjectdao'

    id = Column(Integer, primary_key=True)
    pose_id = Column(Integer, ForeignKey('PoseDAO.id'))
    placeholder = Column(Float)
    pose = relationship('PoseDAO', uselist=False)


class OrientationDAO(Base, DataAccessObject[Orientation]):
    __tablename__ = 'orientationdao'

    id = Column(Integer, primary_key=True)
    x = Column(Float)
    y = Column(Float)
    z = Column(Float)
    w = Column(Float, nullable=True)


class AtomDAO(Base, DataAccessObject[Atom]):
    __tablename__ = 'atomdao'

    id = Column(Integer, primary_key=True)
    element = Column(String(255)  # Unknown type: VARCHAR(1))
    type = Column(Integer)
    charge = Column(Float)


class DoublePositionAggregatorDAO(Base, DataAccessObject[DoublePositionAggregator]):
    __tablename__ = 'doublepositionaggregatordao'

    id = Column(Integer, primary_key=True)
    positions1 = relationship('PositionDAO', uselist=True)
    positions2 = relationship('PositionDAO', uselist=True)


class ChildMappedDAO(Base, DataAccessObject[ChildMapped]):
    __tablename__ = 'childmappeddao'

    id = Column(Integer, primary_key=True)
    __mapper_args__ = {
        'polymorphic_identity': 'classes.example_classes.ChildMapped',
        'inherits': ParentDAO
    }
    attribute1 = Column(Integer)


class TorsoDAO(Base, DataAccessObject[Torso]):
    __tablename__ = 'torsodao'

    id = Column(Integer, primary_key=True)
    __mapper_args__ = {
        'polymorphic_identity': 'classes.example_classes.Torso',
        'inherits': KinematicChainDAO
    }
    kinematic_chains = relationship('KinematicChainDAO', uselist=True)


class DerivedEntityDAO(Base, DataAccessObject[DerivedEntity]):
    __tablename__ = 'derivedentitydao'

    id = Column(Integer, primary_key=True)
    __mapper_args__ = {
        'polymorphic_identity': 'classes.example_classes.DerivedEntity',
        'inherits': EntityDAO
    }
    description = Column(String(255))


class Position4DDAO(Base, DataAccessObject[Position4D]):
    __tablename__ = 'position4ddao'

    id = Column(Integer, primary_key=True)
    __mapper_args__ = {
        'polymorphic_identity': 'classes.example_classes.Position4D',
        'inherits': PositionDAO
    }
    w = Column(Float)
