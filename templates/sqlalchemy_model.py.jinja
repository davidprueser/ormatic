# Generated by SQLAlchemyGenerator

from sqlalchemy import Column, ForeignKey, Integer, String, Float, Boolean, DateTime, Enum, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
{% for module in module_imports %}
import {{ module }}
{% endfor %}


from ormatic.dao import DataAccessObject

Base = declarative_base()

{% for table in wrapped_tables %}
{#{% if table.parent_class %}#}
{#class {{ table.tablename }}({{ table.parent_class.tablename }}, DataAccessObject[{{ table.clazz.__module__ }}.{{ table.clazz.__name__ }}]):#}
{#    __tablename__ = '{{ table.tablename }}'#}
{##}
{#    {{ table.primary_key_name }} = {{ table.primary_key }}#}
{##}
{#    __mapper_args__ = {#}
{#        'polymorphic_identity': '{{ table.clazz.__module__ }}.{{ table.clazz.__name__ }}'#}
{#    }#}
{#{% else %}#}
class {{ table.tablename }}(Base, DataAccessObject[{{ table.clazz.__module__ }}.{{ table.clazz.__name__ }}]):
    __tablename__ = '{{ table.tablename }}'

    {{ table.primary_key_name }} = {{ table.primary_key }}

    {% if table.is_root_of_non_empty_inheritance_structure %}
    {{ table.polymorphic_on_name }} = Column(String(255))
    __mapper_args__ = {
        'polymorphic_on': {{ table.polymorphic_on_name }},
        'polymorphic_identity': '{{ table.clazz.__module__ }}.{{ table.clazz.__name__ }}'
    }
    {% endif %}
{#{% endif %}#}

    {% for column in table.columns %}
    {{ column.name }} = {{ column_format(column) }}
    {% endfor %}

    {% for rel_info in table.one_to_one_relationships %}
    {{ rel_info.field_info.name }} = {{ relationship_format(rel_info, False) }}
    {% endfor %}

    {% for rel_info in table.one_to_many_relationships %}
    {{ rel_info.field_info.name }} = {{ relationship_format(rel_info, True) }}
    {% endfor %}


{% endfor %}
