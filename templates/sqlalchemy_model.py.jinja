# Generated by ORMatic

from __future__ import annotations
from sqlalchemy import Column, ForeignKey, Integer, String, Float, Boolean, DateTime, Enum, JSON
from sqlalchemy.orm import relationship, Mapped, mapped_column, declarative_base
from typing_extensions import Optional, List

{% for module in module_imports %}
import {{ module }}
{% endfor %}

{%- for module, classes in extra_imports.items() %}
from {{ module }} import {{ ", ".join(classes) }}
{%- endfor %}


from ormatic.dao import DataAccessObject
from ormatic.custom_types import TypeType

Base = declarative_base()

{% for table in wrapped_tables %}
class {{ table.tablename }}({{ table.base_class_name }}, DataAccessObject[{{ table.clazz.__module__ }}.{{ table.clazz.__name__ }}]):
    __tablename__ = '{{ table.tablename }}'

    {{ table.primary_key_name }}: Mapped[int] = {{ table.primary_key }}
{##}
{#    {% if table.is_root_of_non_empty_inheritance_structure %}#}
{#    {{ table.polymorphic_on_name }} = Column(String(255))#}
{#    __mapper_args__ = {#}
{#        'polymorphic_on': {{ table.polymorphic_on_name }},#}
{#        'polymorphic_identity': '{{ table.clazz.__module__ }}.{{ table.clazz.__name__ }}'#}
{#    }#}
{#    {% endif %}#}
{#{% endif %}#}
    {% for name, type in table.builtin_columns %}
    {{ name }}: {{ type }}
    {% endfor %}

    {% for name, type, constructor in table.custom_columns %}
    {{ name }}: {{ type }} = {{ constructor }}
    {% endfor %}

    {% for name, type, constructor in table.foreign_keys %}
    {{ name }}: {{ type }} = {{ constructor }}
    {% endfor %}

    {% for name, type, constructor in table.relationships %}
    {{ name }}: {{ type }} = {{ constructor }}
    {% endfor %}

    __mapper_args__ = {{ table.mapper_args }}
{##}
{#    {% for rel_info in table.one_to_many_relationships %}#}
{#    {{ rel_info.field_info.name }} = {{ relationship_format(rel_info, True) }}#}
{#    {% endfor %}#}


{% endfor %}
